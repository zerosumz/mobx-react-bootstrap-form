{"version":3,"file":"index.js","sources":["../src/Validation.js","../src/FormStore.js","../src/Input.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\n\n/**\n * 유효성체크 클래스\n */\nclass Validation {\n\n    /**\n     * 이메일 정규식\n     * @type {RegExp}\n     */\n    static EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    /**\n     * 값있음 정규식\n     * @type {RegExp}\n     */\n    static REQUIRED_REGEX = /^.+$/;\n\n    /**\n     * 새 유효성체크 클래스를 만든다.\n     * @param {RegExp|Function} rule - 테스트용 정규식이나 함수.\n     * @param {string} message - 테스트 실패시 메시지\n     */\n    constructor(rule, message) {\n        this.rule = rule;\n        this.message = message;\n    }\n\n    /**\n     * 유효성 체크 룰.\n     * @type {RegExp|Function}\n     */\n    rule = null;\n\n    /**\n     * 테스트 실패시 메세지\n     * @type {string}\n     */\n    message = null;\n\n    /**\n     * 값이 유효한가?\n     * @param {string} value - 테스트할 값\n     * @return {boolean}\n     */\n    isValid(value) {\n        return (this.rule instanceof RegExp && !this.rule.test(value)) ||\n            (this.rule instanceof Function && !this.rule(value));\n    }\n}\n\nexport default Validation;","import {action, computed, observable} from 'mobx';\nimport Validation from './Validation';\n\n/**\n * 폼 내의 각 인풋 필드의 값을 저장할 수 있는 스토어.\n */\nclass FormStore {\n\n    /**\n     * 동기화 된 인풋 필드의 값.(observable)\n     *\n     * @type {Map<String,*>}\n     */\n    @observable\n    valueMap = new Map();\n\n    /**\n     * 상호작용에 의해 입력이 시도 되었는지의 상태 (observable)\n     *\n     * @type {Map<String,boolean>}\n     */\n    @observable\n    hasTried = new Map();\n\n    /**\n     * 유효성체크 Validation 의 모음\n     * @type {Map<String,Validation>}\n     */\n    validationMap = new Map();\n\n    /**\n     * 폼내의 인풋 필드의 모음 (observable)\n     * observable\n     * @type {Map<String,HtmlElement>}\n     */\n    @observable\n    refs = new Map();\n\n    /**\n     * 입력시도 상태 및 값을 초기화한다.\n     */\n    @action.bound\n    clear() {\n        this.hasTried.clear();\n        this.valueMap.clear();\n    }\n\n\n    /**\n     * 유효성 체크를 통과하지 못한 이름별 {@link Validation} 목록 (computed)\n     * @return {Map<string, Array<Validation>>}\n     */\n    @computed\n    get invalidationsMap() {\n        let m = new Map();\n        this.valueMap.forEach((value, name) => {\n            let validations = this.validationMap.get(name) || [];\n            let invalidations = validations.filter(validation => validation.isValid(value));\n            if (invalidations && invalidations.length > 0)\n                m.set(name, invalidations);\n        });\n\n        return m;\n    }\n\n    /**\n     * 유효성 체크를 통과하지 못한 첫 번째 {@link Validation}의 에러 메세지 (computed)\n     * @return {string|null} message - 에러메세지\n     */\n    @computed\n    get firstErrorMessage() {\n        let firstInput = [...this.invalidationsMap.entries()][0];\n        let validation;\n        if (firstInput && firstInput.length > 1)\n            validation = firstInput[1];\n\n        return firstInput && validation[0] ? validation[0].message : null;\n    }\n\n    /**\n     * 유효성 체크를 통과하지 못한 첫 번째 인풋 필드 (computed)\n     * @return {HtmlElement}\n     */\n    @computed\n    get firstInvalidRef() {\n        let firstInput = [...this.invalidationsMap.entries()][0];\n        if (firstInput && firstInput.length > 1) {\n            let name = firstInput[0];\n            return this.refs.get(name);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * valueMap 에 동기화된 모든 값이 다 유효한가?\n     * @return {boolean}\n     */\n    @computed\n    get valid() {\n        return this.invalidationsMap.size === 0;\n    }\n\n    /**\n     * 유효성 체크를 통과하지 못한 모든 인풋필드의 에러메시지 목록들 (computed)\n     * @return {Map<string, Array<string>>}\n     */\n    @computed\n    get errorMessagesMap() {\n        let m = new Map();\n        this.invalidationsMap.forEach((validations, name) => {\n            m.set(name, validations.map(v => v.message));\n        });\n        return m;\n    }\n\n    /**\n     * 인풋필드를 찾아서 유효하지 않을경우 에러 메시지를 얻는다\n     * @param {string} name - 인풋필드의 이름\n     * @return {Array<string>} - 유효하지 않은 경우 각각의 에러메시지 목록\n     */\n    getErrorMessages(name) {\n        let errorMessages = this.errorMessagesMap.get(name);\n        return errorMessages || [];\n    }\n\n}\n\nexport default FormStore;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormControl} from 'react-bootstrap';\nimport {observer} from 'mobx-react';\nimport Validation from './Validation';\n\n/**\n * 오브젝트에서 지정한 키목록을 제거\n * @param {object} obj 변경하고자 하는 오브젝트\n * @param {...string} keys 지우고자 하는 키 목록\n * @return {object} 복제된 결과 오브젝트\n */\nconst omit = (obj, ...keys) => {\n    let result = Object.assign({}, obj);\n    keys.forEach(key => delete result[key]);\n    return result;\n};\n\n/**\n * mobx 폼 스토어와 동기화 되는 인풋 필드.\n *\n * @reactProps {object} store - mobx 스토어\n * @reactProps {string} name  - 필드 이름\n * @reactProps {*} value  - 필드 값\n * @reactProps {Array<Validation>} validations  - 유효성 체크목록\n */\n@observer\nclass Input extends React.Component {\n\n    componentWillMount() {\n        let {store, name, value, validations} = this.props;\n        store.validationMap.set(name, validations);\n        store.valueMap.set(name, value || '');\n    }\n\n    render() {\n        let {store, name, validOnBlur, onChange, onBlur} = this.props;\n        return (\n            <FormControl inputRef={ref => store.refs.set(name, ref)}\n                         value={store.valueMap.get(name)}\n                         onChange={e => {\n                             store.valueMap.set(name, e.target.value || '');\n                             onChange && onChange(e);\n                         }}\n                         onBlur={e => {\n                             if(validOnBlur)\n                                 store.hasTried.set(name, true);\n\n                             onBlur && onBlur(e);\n                         }}\n                         {...omit(this.props, 'store', 'value', 'validations', 'validOnBlur', 'onChange', 'onBlur')}\n            />\n        );\n    }\n}\n\nInput.propTypes = {\n    store: PropTypes.object.isRequired,\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    validOnBlur: PropTypes.bool,\n    value: PropTypes.any,\n    validations: PropTypes.arrayOf(PropTypes.instanceOf(Validation))\n};\n\nexport default Input;"],"names":["Validation","rule","message","value","this","RegExp","test","Function","EMAIL_REGEX","REQUIRED_REGEX","FormStore","action","bound","validationMap","Map","hasTried","clear","valueMap","name","errorMessagesMap","get","m","forEach","invalidations","_this","filter","validation","isValid","length","set","firstInput","invalidationsMap","entries","refs","size","validations","map","v","observable","computed","omit","obj","keys","result","Object","assign","key","Input","observer","props","store","validOnBlur","onChange","onBlur","React","FormControl","inputRef","ref","e","target","Component","propTypes","PropTypes","object","isRequired","string","func","bool","any","arrayOf","instanceOf"],"mappings":"q5CAKMA,+CAmBUC,EAAMC,+BASlBD,KAAO,UAMPC,QAAU,UAdDD,KAAOA,OACPC,QAAUA,sDAoBXC,UACIC,KAAKH,gBAAgBI,SAAWD,KAAKH,KAAKK,KAAKH,IAClDC,KAAKH,gBAAgBM,WAAaH,KAAKH,KAAKE,mBArC9CK,YAAc,gKAMdC,eAAiB,opBCXtBC,gBAmCDC,OAAOC,wKAbRC,cAAgB,IAAIC,4GAeXC,SAASC,aACTC,SAASD,iDA6EDE,UACOd,KAAKe,iBAAiBC,IAAIF,2DApE1CG,EAAI,IAAIP,gBACPG,SAASK,QAAQ,SAACnB,EAAOe,OAEtBK,GADcC,EAAKX,cAAcO,IAAIF,QACTO,OAAO,mBAAcC,EAAWC,QAAQxB,KACpEoB,GAAiBA,EAAcK,OAAS,GACxCP,EAAEQ,IAAIX,EAAMK,KAGbF,gDASHS,8BAAiB1B,KAAK2B,iBAAiBC,YAAW,GAClDN,gBACAI,GAAcA,EAAWF,OAAS,IAClCF,EAAaI,EAAW,IAErBA,GAAcJ,EAAW,GAAKA,EAAW,GAAGxB,QAAU,iDASzD4B,8BAAiB1B,KAAK2B,iBAAiBC,YAAW,MAClDF,GAAcA,EAAWF,OAAS,EAAG,KACjCV,EAAOY,EAAW,UACf1B,KAAK6B,KAAKb,IAAIF,yCAYa,IAA/Bd,KAAK2B,iBAAiBG,kDASzBb,EAAI,IAAIP,gBACPiB,iBAAiBT,QAAQ,SAACa,EAAajB,KACtCW,IAAIX,EAAMiB,EAAYC,IAAI,mBAAKC,EAAEnC,aAEhCmB,gFApGViB,yDACU,IAAIxB,6EAOdwB,yDACU,IAAIxB,yEAadwB,yDACM,IAAIxB,oNAgBVyB,uKAiBAA,sKAcAA,0JAeAA,2JASAA,+GC/FCC,KAAO,SAACC,8BAAQC,uDACdC,EAASC,OAAOC,UAAWJ,YAC1BnB,QAAQ,0BAAcqB,EAAOG,KAC3BH,GAYLI,MADLC,4PAI+C5C,KAAK6C,MAAxCC,IAAAA,MAAOhC,IAAAA,KAAMf,IAAAA,MAAOgC,IAAAA,cACnBtB,cAAcgB,IAAIX,EAAMiB,KACxBlB,SAASY,IAAIX,EAAMf,GAAS,2CAIiBC,KAAK6C,MAAnDC,IAAAA,MAAOhC,IAAAA,KAAMiC,IAAAA,YAAaC,IAAAA,SAAUC,IAAAA,cAErCC,oBAACC,sBAAYC,SAAU,mBAAON,EAAMjB,KAAKJ,IAAIX,EAAMuC,UAC/BP,EAAMjC,SAASG,IAAIF,YAChB,cACAD,SAASY,IAAIX,EAAMwC,EAAEC,OAAOxD,OAAS,OAC/BiD,EAASM,WAEjB,YACDP,GACCD,EAAMnC,SAASc,IAAIX,GAAM,MAEnBmC,EAAOK,KAEjBlB,KAAKpC,KAAK6C,MAAO,QAAS,QAAS,cAAe,cAAe,WAAY,mBAvBtFK,MAAMM,sBA6B1Bb,MAAMc,iBACKC,UAAUC,OAAOC,gBAClBF,UAAUG,OAAOD,oBACbF,UAAUI,YACZJ,UAAUI,iBACLJ,UAAUK,WAChBL,UAAUM,gBACJN,UAAUO,QAAQP,UAAUQ,WAAWtE"}